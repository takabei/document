
#########################################################################################
CAP:
Consistency:强一致性
Availability:可用性
Partition tolerance:分区容错性

#########################################################################################
ACID：
Atomicity:原子性
Consistency:一致性
Isolation:独立性
Durability:持久性

#########################################################################################
CAP 3进2:
CAp理论就是说在分布式存储系统中，最多实现上面的两点。由于当前网络硬件肯定会出现延迟丢包问题，
所以分区容错性是我们必须实现的。故必须在一致性和可用性之间进行权衡，没有Nosql系统能同时保证这三点。
CA 传统Oracle数据库
AP 大多数网站架构的选择
CP Redis、Mongodb

#########################################################################################
BASE:
基本可用 Basically Available
软状态	Soft state
最终一致 Eventually consistent
思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上的改观。

#########################################################################################
分布式：不同的多台服务器上部署不同的服务模块（工程），它们之间通过Rpc/Rmi之间通信和调用，
	对外提供服务和组内协调。
集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问。
负载均衡：分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。

#########################################################################################
Redis:REmote DIctionary Server(远程字典服务器)
Redis支持数据的持久化
Redis不仅支持简单的key-value类型的数据，还提供list、set、zset、hash等数据结构的存储
Redis支持数据的备份，即master-slave模式的数据备份

#########################################################################################
Redis基础知识杂项：
单进程：单进程模型来处理客户端的请求。对读写事件的响应是通过对epoll函数的包装来做到的。
	Redis的实际处理速度完全依靠主进程的执行效率。
默认十六个数据库  默认从0开始
select index（切换数据库)
Dbsize 查看当前数据库 key的数量
FlushDB 清理当前库中的 所有key
FlushALL 通杀全部库
统一密码管理，16个库都是同样密码，要么都ok要么一个连不上
Redis索引都是从零开始

#########################################################################################
Redis数据类型：
五大数据类型：String、Hash、List、Set、Zset(sorted set)

#########################################################################################
key:
keys * 得到所有key
exists key的名字，判断某个key是否存在
move key db 移动key至指定库
expire key 秒数：为给定的key设置过期时间
ttl key 查看还有多少秒过期，-1代表永不过期，-2表示已过期
type key 查看key的类型
del key 删除指定key，0代表失败，1代表成功

#########################################################################################
String:
set key value 给key设置值，覆盖已有的值
get key 获取名为key的值
del  key 删除名为key的值
append key value 在key的最后添加值，值为value
strlen key 获取key的长度
（只能是纯数字）
Incr key      key加1
decr key      key减1
incrby key increment key 加指定的值
decrby key decrement key减指定的值
（只能是纯数字）
getrange key start end 从start开始到end结束的长度的key的值，0 -1代表全部
setrange key offset value 从offset开始替代为value
setex(set with expire) key seconds value 设置key的生存秒数以及key的值
setnx key value 给key赋值， 与set类似，但当key已存在时，setnx赋值失败
mset key value [key value...] 给多个key同时赋值
mget key [key...] 同时获取多个key的值
msetnx key value [key value...] 与mset类似，当有key已存在时全部失败
getset key value 先获取key的值打印，再用value去覆盖该值

#########################################################################################
list:
lpush key value [value...] 从头向链表中插入value值
rpush key value [value...] 从尾向链表中插入vlaue值
lrange key 获取链表的值
lpop key 从链表的头部出一个值
rpop key 从链表的尾部出一个值
lindex key index 获取链表index位的值(同样满足最后一位为-1，向前递减）
llen key 获取链表的长度
lrem key count value 删除链表key中count个value值
ltrim key start end 将key中从start 到 end的值赋值给key
rpoplpush source destination 从source中rpop一个值并以lpush的形式加到destination中
lset key index value 将key中下标为index的值设置为value
linsert key befor/after pivot value 在key的值pivot之前或之后插入一个为value的值

#########################################################################################
set:
sadd key value [value...] 向集合key中添加value，自动去重
smembers key 遍历key
sismembers key memeber 检测key中member值是否存在 存在为1，不存在为0
scard key 获取集合中的元素个数
srem key value 删除集合中值为value的元素
srandmember key [count] 随即从集合中获取一个（默认）或者count个数
spop key [count] 随机从集合中出栈一个（默认）或者count个元素
smove source destination value 从source中出栈value并放置到destination中(source、destination为set)
差集：sdiff key [key...] 
交集：sinter key [key...]
并集：sunion key [key...]

#########################################################################################
HASH:(KV模式不变，但V是一个键值对)
hset key field value 给key的键field赋值为value
hget key field 获取key的键field的值
hmset key field field value [field value...] 给key的多个键field设置值
hmget key field [field...] 获取key的多个键的值
hgetall key  获取key的全部键值对
hdel key field [field...] 删除key的多个field
hlen key 获取key的键值对
hexists key field 检测key中的某个field是否存在
hkeys key 获取key的全部键
hvals key 获取key的全部值
hincrby key field increment 将key的键field的值加increment
hincrbyfloat key field increment 将key的键field的值加increment
hsetnx key field value 类似与hset，当key中field已存在时，赋值失败

#########################################################################################
Zset:(sorted set) 
在set基础上，加一个score值。之前set是key value [value...]
现在zset是key [NX|XX] [CH] [INCR] score member [score member...]

zadd key score member [score member] 在key中添加分数为score，值为member的元素
zrange key start stop [withscores] 遍历key中的member，若有withscores,则输出中带score
zrangebyscore key min max [withscores] [limit offset count] 获取key中score小于等于min 大于等于max的member，“(”表示不包括，withscores在输出中带score，limit用于分页
zrem key member 删除key中的member值
zcard key 统计key中的member数量
zcount key min max 获取key中score从min到max的个数 "("表示不包括
zrank key member 获取key中member元素的下标
zscore key member 获取key中member元素对应的score
zrevrank key member 获取逆序member的下标值
zrevrange key start stop [withscores] 逆序的zrange
zrevrangebyscore key max min [withscores] [limit offset count] 逆序zrangebyscore


#########################################################################################
对redis.conf的解读
1>Utils单位：
	1)配置大小单位，开头定义了一些基本度量单位，只支持bytes(字节)，不支持bit
	2)对大小写不敏感
2>INCLUDEs:
	1)可以通过includes包含其他的redis配置文件，redis.conf作为总阀
3>GENERAL:
	1)syslog-enabled:是否把日志输出到syslog中
	2)syslog-ident:指定syslog里的日志标志
	3)指定syslog设备，值可以为USER或LOCAL0-LOCAL7
	4)loglevel 日志级别(默认notice)
		#debug(很多信息，对开发/测试有用)
		#冗长verbose(很多很少有用的信息，但不像调试级别那么混乱)
		#注意notice(可能有些冗长，您在生产中需要什么)
		#警告warning(只记录非常重要/关键的消息)
4>LIMITS:
	1)maxmemory-policy 最大内存政策
		volatile-ru:使用LRU算法移除key,只对设置了过期时间的键
		allkeys-lru:使用LRU算法移除key
		volatile-random:在过期集合中移除随即的key，只对设置了过期时间的键
		allkeys-random:移除随即的key
		volatile-ttl:移除那些ttl值最小的key，及那些最近要过期的key
		noeviction:不进行移除。针对写操作，值返回错误信息
5>snapshotting 
	save <seconds> <changes>
	bgsave
		1)rdb是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件
		默认 1分钟改动1万次；5分钟改动10次；15分钟改动1次；
		执行flshall时迅速切断内存，生成dump.rdb文件
		2)若要禁用rdb持久化策略，只要不设置任何save指令，或给save传入一个空字符串即可。
			save ""
		3)手动备份、迅速备份
			save（save时只管保存，其他不管，全部阻塞）
		4)bgsave:
		redis会在后台一部进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave
		命令获取最后一次成功执行快照的时间
	stop-writes-on-bgsave-error
		1)备份出错时停止写入
		2）若设置为“no”，表示不在乎数据不一致或者有其他的的手段发现和控制
	rdbcompression
		1)对于存储到磁盘中的快照，可以设置是否进行压缩存储。若是的话，redis会采用LZF算法进行压缩。
		若不想消耗CPU来进行压缩的话，可设置为“no“
	rdbchecksum
		1）在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但这样会损耗10%的性能，
		若希望获取最大的性能提升，可以设置为"no"
#########################################################################################
Redis持久化：
rdb(Redis DataBase)
	1）在指定的时间间隔内将内存中的数据集快照写入磁盘，也称为Snapshot快照，
	它恢复时是将快照文件直接读到内存里。
	2）Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，
	待持久化过程结束后，再用临时文件替换上次持久化好的文件。
	3）整个过程，主进程是不进行任何IO操作的，确保性能。
	4）若要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那么rdb方式要比aof方式更加高效。
	rdb的缺点是最后一次持久化后的数据可能丢失。
	(2)FORK：复制一个与当前线程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都
		和原进程一直，但是一个全新的进程，并作为原进程的子进程存在。
	(3)rdb保存的是dump.rdb文件(flushall时会迅速生成sump.db文件）
		在redis.conf内的snapshotting内有关于备份的配置
	(4)适合大规模的数据恢复，对数据完整性和一致性要求不高。
	(5)在一定间隔时间作一次备份，若redis意外down时，就会丢失最后一次快照后的修改。
	在fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑
aof(Append Only File)
